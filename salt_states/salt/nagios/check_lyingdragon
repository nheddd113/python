#!/usr/bin/env python
#encoding=utf-8
import socket,sys,os,time,json,logging,urllib2
from optparse import OptionParser
from ConfigParser import SafeConfigParser

def init():
    import salt.config,salt.minion,salt.loader
    log.info("import success")
    opts = salt.config.minion_config("/etc/salt/minion")
    opts['grains'] = salt.loader.grains(opts)
    log.info("get grains success")
    opts.update(salt.minion.resolve_dns(opts))
    log.info("get master uri success")
    minion = salt.loader.minion_mods(opts)
    log.info("get model success")
    minion['gamename'] = opts['grains']['gamename']
    return minion
def checkNotify(mods):
    return mods['grains.get']('is_notify')

def getIpaddress(mods):
    gamename = mods['gamename']
    config = getconfig()
    gamename = config.get(gamename,'gamename')
    fp = open("/etc/conf/uqee/{0}/server/config.json".format(gamename))
    fpstr = json.load(fp)
    if fpstr['server'].has_key('web'):
        eths = fpstr['server']['web']['admin']['eth'].split(";")
        ports = fpstr['server']['web']['admin']['port']
    elif fpstr['server'].has_key('http'):
        eths = fpstr['server']['http']['admin']['eth'].split(";")
        ports= fpstr['server']['http']['admin']['port']
    else:
        ret = {"code":1,"msg":"get eth or port faild!"}
        return ret
    interfaces = mods['network.interfaces']()
    ports = int(ports)
    for eth in eths:
        if eth in interfaces.keys() and interfaces[eth]['up'] is True:
            ret = interfaces[eth]
            break
    else:
        ret = {"code":1,"msg":"parse config file faild"}
        return ret
    for val in ret['inet']:
        if val['label'] == eth:
            return val['address']
        

def getconfig():
    config = SafeConfigParser()     
    with open("/mnt/db.bak/xl/gameinfo.conf","r") as fp:
        config.readfp(fp)
    return config

def startGame(mods):
    config = getconfig()
    gamename = mods['gamename']
    alias = config.get(gamename,'alias')
    cmd = "/mnt/db.bak/xl/start_game.sh {0}".format(alias)
    ret = mods['cmd.run_all'](cmd,shell="/bin/bash")
    if ret['retcode'] == 0:
        return True
    else:
        return False

def getMonitorProcess(mods):
    config = getconfig()
    gamename = mods['gamename']
    process = config.get(gamename,'process')
    try:
        pro = eval(process)
    except Exception as e:
        log.error("get processs error: {0}".format(process))
        print "get processs error: {0}".format(process)
        exit(1)
    return pro

   
def main():
    log.info("start main !")
    mods = init()
    log.info("mods load success!")
    #如果是手动关掉的. 就直接退出
    if not checkNotify(mods):
        print "game has been closed normally!"
        log.warning("game has been closed normally!" + dmi)
        exit(1)
    process = getMonitorProcess(mods)
    ret = {}
    for pro in process:
        res = checkProcess(mods,pro)
        ret[pro['name']] = {}
        ret[pro['name']]['code'] = res['ok']
        ret[pro['name']]['msg'] = res['msg']
    maxCode = 0
    exitMsg = ''
    for name in ret:
        if maxCode<ret[name]['code']:
            maxCode = ret[name]['code']
        exitMsg += ret[name]['msg'] + "<->"
        exitMsg = exitMsg[:-1]
    if maxCode == 2:
        startGame(mods)
        print exitMsg + "<->game is restart now"
        log.warning("game is restart now")
    else:
        print exitMsg
    log.info(dmi)
    exit(maxCode)
        

def checkProcess(mods,process):
    # host = getIpaddress(mods)
    # 如果配置文件里没有指定主机. 就去config.json拿IP.
    # 只允许主程序的host是None, 其它程序必须指定为127.0.0.1
    ret = {"ok":0,"msg":""}
    if process['host'] is None:
        host = getIpaddress(mods)
        if isinstance(host,dict):
            print host['msg']
            log.error(host['msg'] + dmi)
            exit(host['code'])
        host = (host,process['port'])
    else:
        host = (process['host'],process['port'])
    if process['method'] == 'http':
        process['command']=process['command'].format(
            ip=host[0],port=host[1]
            )
        return doHttp(process,ret)
    else:
        return doSocket(process,host,ret)

def doHttp(process,ret):
    #print process
    req = urllib2.Request(process['command'])
    try:
        res = urllib2.urlopen(req,None,5)
        log.info("{0} is ok now!".format(process['name']))
        ret['msg'] = "{0} is ok now!".format(process['name'])
        return ret
    except urllib2.URLError as e:
        ret['ok'] = 2
        log.error("{0}:Connection refused,"\
                      "{0} was stopped!{1}"\
                      .format(process['name'],e.reason.strerror))
        ret['msg'] = "{0}:Connection refused,game"\
            " was stopped!".format(process['name'])
        return ret
    except urllib2.HTTPError as e:
        log.warning("{0}:{1},{0} was stopped!".format(
                process['name'],e.fp.read()))
        ret['ok'] = 1
        ret['msg'] = "{0}: {1},"\
            "{0} was stopped!\n".format(process['name'],e.fp.read())
        return ret
    except urllib2.HTTPError as e:
        log.warning("{0}:{1},{0} was stopped!".format(
                process['name'],e.message))
        ret['ok'] = 1
        ret['msg'] = "{0}: {1},"\
            "{0} was stopped!\n".format(process['name'],e.message)
        return ret
        
        
        

def doSocket(process,host,ret):
    #print host
    socket.setdefaulttimeout(10)
    cs = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    try:
        cs.connect((host))
        if process['command']:
            cs.send(process['command'])
            data = cs.recv(1024)
        else:
            cs.send('@')
        log.info("{0} is ok now!".format(process['name']))
        ret['msg'] = "{0} is ok now!".format(process['name'])
        return ret
    except socket.timeout as e:
        log.warning("{0}:{1},{0} was stopped!".format(
                process['name'],e.message))
        ret['ok'] = 1
        ret['msg'] = "{0}: {1},"\
            "{0} was stopped!\n".format(process['name'],e.message)
        return ret
    except socket.error as e:
        ret['ok'] = 2
        log.error("{0}:{1},"\
                      "{0} was stopped!".format(process['name'],e.strerror))
        ret['msg'] = "{0}:{1},{0}"\
            " was stopped!".format(process['name'],e.strerror)
        return ret
    finally:
        cs.close()

def logger():
    logging.basicConfig(level=logging.INFO,
                format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S %A',
                filename='/var/log/check_lyingdragon.log',
                filemode='a')
    # console = logging.StreamHandler()
    # console.setLevel(logging.WARNING)
    # formatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')
    # console.setFormatter(formatter)
    logging.getLogger(__name__)#.addHandler(console)
    return logging

if __name__ == '__main__':
    log = logger()
    dmi = "\n----------------------------"
    try:
        main()
        log.info("script end!" + dmi)
    except Exception as e:
        log.exception("Exception Logged")
        print e
        exit(1)
